import Head from 'next/head'
import Image from 'next/image'
import styles from './home.module.scss'
import { useState, useEffect, useCallback, useLayoutEffect } from 'react'
import { useSwipeable } from 'react-swipeable'
import { throttle, debounce } from 'lodash';
import { Router } from 'next/router'

const SLIDE_COUNT = 8

export default function Home({ share }) {

  let MIN_PAGE = (share.length > 1) ? 1 : 0
  const [slide, setSlide] = useState(MIN_PAGE);
  console.log(slide);

  useLayoutEffect(() => {
    let secs = document.querySelectorAll(`section`);
    secs.forEach((ele) => {
      ele.style.minHeight = window.innerHeight;
    })

  }, [])

  const handlers = useSwipeable({
    onSwiped: (eventData) => {
      console.log("User Swiped!", eventData)
      if (eventData.dir == 'Up') {
        setSlide((s) => {
          if (s < SLIDE_COUNT) {
            return s + 1
          }
          return s
        })
      }
      else if (eventData.dir == 'Down') {
        setSlide((s) => {
          if (s > MIN_PAGE) {
            return s - 1
          }
          return s
        })
      }
    }
  });

  const wheelFlip = (e) => {
    console.log("flip")
    if (e.nativeEvent.wheelDeltaY == -120) {
      setSlide((s) => {
        if (s < SLIDE_COUNT) {
          return s + 1
        }
        return s
      })
    }
    if (e.nativeEvent.wheelDeltaY == +120) {
      setSlide((s) => {
        if (s > MIN_PAGE) {
          return s - 1
        }
        return s
      })
    }
  }
  const [data, setdata] = useState({});

  useEffect(() => {
    let gen_data = JSON.parse(localStorage.getItem('gen-data'));
    if (gen_data) {
      setdata(gen_data)
    }
    else {
      alert("Wallet Error");
      Router.push('/');
    }
  }, [])


  const throttled = useCallback(debounce((e) => { wheelFlip(e) }, 250), [slide]);

  const nullCheck = (key) => {
    if (key in data) {
      return formatNumber(data[key])
    }
    else {
      return `000`
    }
  }

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main {...handlers} className={styles.home} onWheel={(e) => { console.log("wheel"); throttled(e) }}>
        {/* <GridCon /> */}
        {< Hero slide={slide} pos={0} nft={('NumberToBeAssigned' in data) ? data['NumberToBeAssigned'] : 0} />}
        <div className={styles.backroom}>
          {< Sec1 slide={slide} pos={1} value={nullCheck(`totalTokenHolding`)} />}
          {<Sec2 slide={slide} pos={2} value={nullCheck(`totalChainInteracted`)} />}
          {<Sec3 slide={slide} pos={3} value={nullCheck(`totalNftHolding`)} />}
          {<Sec4 slide={slide} pos={4} value={nullCheck(`gasSpentGwei`)} />}
          {<Sec5 slide={slide} pos={5} value={nullCheck(`totalNumberOftransaction`)} />}
          {<Sec6 slide={slide} pos={6} value={nullCheck(`percentLoss`)} />}
          {<Sec7 slide={slide} pos={7} value={nullCheck(`percentProfit`)} />}
          {< End slide={slide} pos={8} nft={('NumberToBeAssigned' in data) ? data['NumberToBeAssigned'] : 0} />}
        </div>
      </main>
    </>
  )


}


// flipper = 0 = black
// degen = 1 = green
// hodler = 2 = gold
// shitcoiner = 3 = silver
// rekt = 4 = red
// papperhand = 5 = pink


function formatNumber(num) {
  if (!num) {
    return '000'
  }
  if (num >= 1000000) {
    return (num / 1000000).toFixed(1).replace(/\.0$/, '') + 'M';
  } else if (num >= 1000) {
    return (num / 1000).toFixed(0).replace(/\.0$/, '') + 'K';
  } else {
    return num.toFixed(0).toString().padStart(3, '0');
  }

}

function Hero({ slide, pos, nft }) {
  console.log(nft)
  let nft_src = 0
  switch (nft) {
    case 0:
      nft_src = `/nft/black.glb`
      break;
    case 1:
      nft_src = `/nft/green.glb`
      break;
    case 2:
      nft_src = `/nft/gold.glb`
      break;
    case 3:
      nft_src = `/nft/silver.glb`
      break;
    case 4:
      nft_src = `/nft/red.glb`
      break;
    case 5:
      nft_src = `/nft/pink.glb`
      break;
  }

  return <div className={styles.hero}>
    <GridCon />
    <div className={styles.heroText}>
      <div className={styles.mainText}>
        <h1>CHEERS!</h1>
        <h1>YOU ARE</h1>
        <h1>OFFICIALLY A</h1>
        <h1 className={styles.colorText}>DEGEN</h1>
      </div>
      <div className={styles.subText}>
        <p>Congrats! We have sent your unique web3 wrapped NFT to your wallet. </p>
        <p>Scroll through this page to check your web3 activity stats ;)</p>
      </div>
      <img className={styles.orb} src="hero/orb.png" alt="" />
      <img className={styles.bits} src="hero/bits.png" alt="" />
    </div>
    <div className={styles.arrowCon}>
      <div className={styles.arrow}>
        <img className={styles.inner} src="hero/innerRing.png" alt="" />
        <img className={styles.outter} src="hero/outterRing.png" alt="" />
        <img className={styles.innerArrow} src="hero/innerArrow.png" alt="" />
      </div>
    </div>
    <div className={styles.model3d}>
      <model-viewer
        alt="Neil Armstrong's Spacesuit from the Smithsonian Digitization Programs Office and National Air and Space Museum"
        src={nft_src}
        shadow-intensity="1"
        auto-rotate
        rotation-per-second={"450%"}
        camera-controls
        interaction-prompt={"none"}
        camera-orbit={"-0.04973251391208239rad 1.4782630487118047rad 6.3433248805926405m"}
      >
      </model-viewer>
    </div>
  </div>;
}


function End({ slide, pos, nft }) {
  let nft_src = 0
  switch (nft) {
    case 0:
      nft_src = `/nft/black.glb`
      break;
    case 1:
      nft_src = `/nft/green.glb`
      break;
    case 2:
      nft_src = `/nft/gold.glb`
      break;
    case 3:
      nft_src = `/nft/silver.glb`
      break;
    case 4:
      nft_src = `/nft/red.glb`
      break;
    case 5:
      nft_src = `/nft/pink.glb`
      break;
  }
  return <div className={styles.end + ' ' + ((slide >= pos) ? styles[`animSlide`] : '') + ' ' + ((slide > pos) ? styles[`dim`] : '')}>
    <GridCon />
    <div className={styles.heroText}>
      <div className={styles.mainText}>
        <h1>LIKED OUR</h1>
        <h1>WRAPPED?</h1>
      </div>
      <div className={styles.subText}>
        <p>Check your friendâ€™s web3 wrapped to see if they rekt or not ;) </p>
      </div>
      <img className={styles.orb} src="hero/orb.png" alt="" />
      <img className={styles.bits} src="hero/bits.png" alt="" />
      <input className={styles.input} type="text" placeholder='Enter wallet address here' />
      <button className={styles.btn}>Unwrap It!</button>
      <div className={styles.rewind}>
        <img src="end/rewind.png" alt="" />
        <p>Rewind</p>
      </div>
    </div>
    <div className={styles.socials}>
      <p>Brag it on socials</p>
      <span>
        <img src="/end/twitter.png" alt="" />
        <img src="/end/discord.png" alt="" />
        <img src="/end/link.png" alt="" />
      </span>
    </div>
    {/* <div className={styles.arrowCon}>
      <div className={styles.arrow}>
        <img className={styles.inner} src="hero/innerRing.png" alt="" />
        <img className={styles.outter} src="hero/outterRing.png" alt="" />
        <img className={styles.innerArrow} src="hero/innerArrow.png" alt="" />
      </div>
    </div> */}
    <div className={styles.model3d}>
      <model-viewer
        alt="Neil Armstrong's Spacesuit from the Smithsonian Digitization Programs Office and National Air and Space Museum"
        src={nft_src}
        shadow-intensity="1"
        auto-rotate
        rotation-per-second={"450%"}
        camera-controls
        interaction-prompt={"none"}
        camera-orbit={"-0.04973251391208239rad 1.4782630487118047rad 6.3433248805926405m"}
      >
      </model-viewer>
    </div>
  </div>;
}

function Sec1({ slide, pos, value }) {

  return <section className={styles[`sec${pos}`] + ' ' + ((slide >= pos) ? styles[`animSlide`] : '') + ' ' + ((slide > pos) ? styles[`dim`] : '')}>
    <GridCon />
    <span style={{ background: "#A2E200" }} className={styles.glow}>
    </span>
    <span className={styles.glowText}>
      <p>Total Tokens Held</p>
      <h1>{value}</h1>
      <img className={styles.one} src="/sec1/1.png" alt="" />
      <img className={styles.two} src="/sec1/2.png" alt="" />
      <img className={styles.three} src="/sec1/3.png" alt="" />
      <img className={styles.four} src="/sec1/4.png" alt="" />
      <img className={styles.five} src="/sec1/5.png" alt="" />
      <img className={styles.six} src="/sec1/6.png" alt="" />
    </span>
  </section>;
}

function Sec2({ slide, pos, value }) {
  return <section className={styles[`sec${pos}`] + ' ' + ((slide >= pos) ? styles[`animSlide`] : '') + ' ' + ((slide > pos) ? styles[`dim`] : '')}>
    <GridCon />
    <span style={{ background: "#DF914A" }} className={styles.glow}>
    </span>
    <span className={styles.glowText}>
      <p>Number of EVM Chains Used</p>
      <h1>{value}</h1>
      <img className={styles.one} src="/sec2/1.png" alt="" />
      <img className={styles.two} src="/sec2/2.png" alt="" />
      <img className={styles.three} src="/sec2/3.png" alt="" />
      <img className={styles.four} src="/sec2/4.png" alt="" />
    </span>

  </section>;
}

function Sec3({ slide, pos, value }) {



  return <section className={styles[`sec${pos}`] + ' ' + ((slide >= pos) ? styles[`animSlide`] : '') + ' ' + ((slide > pos) ? styles[`dim`] : '')}>
    <GridCon />
    <span style={{ background: "#2D2DFF" }} className={styles.glow}>

    </span>
    <span className={styles.glowText}>
      <p>Total NFTs/SBTs/POAPs Owned</p>
      <h1>{value}</h1>
      <img className={styles.one} src="/sec3/1.png" alt="" />
      <img className={styles.two} src="/sec3/2.png" alt="" />
      <img className={styles.three} src="/sec3/3.png" alt="" />
      <img className={styles.four} src="/sec3/4.png" alt="" />
      <img className={styles.five} src="/sec3/5.png" alt="" />
      <img className={styles.six} src="/sec3/6.png" alt="" />
    </span>
  </section>;
}


function Sec4({ slide, pos, value }) {
  return <section className={styles[`sec${pos}`] + ' ' + ((slide >= pos) ? styles[`animSlide`] : '') + ' ' + ((slide > pos) ? styles[`dim`] : '')}>
    <GridCon />
    <span style={{ background: "#FB6334" }} className={styles.glow}>

    </span>
    <span className={styles.glowText}>
      <p>Total Gas Consumed this year</p>
      <h1>{value}</h1>
      <img className={styles.one} src="/sec4/1.png" alt="" />
      <img className={styles.two} src="/sec4/2.png" alt="" />
      <img className={styles.three} src="/sec4/3.png" alt="" />
      <img className={styles.four} src="/sec4/4.png" alt="" />
      <img className={styles.five} src="/sec4/5.png" alt="" />
    </span>

  </section>;
}

function Sec5({ slide, pos, value }) {
  return <section className={styles[`sec${pos}`] + ' ' + ((slide >= pos) ? styles[`animSlide`] : '') + ' ' + ((slide > pos) ? styles[`dim`] : '')}>
    <GridCon />
    <span style={{ background: "#16C547" }} className={styles.glow}>

    </span>
    <span className={styles.glowText}>
      <p>Total Transactions on EVM</p>
      <h1>{value}</h1>
      <img className={styles.one} src="/sec5/1.png" alt="" />
      <img className={styles.two} src="/sec5/2.png" alt="" />
      <img className={styles.three} src="/sec5/3.png" alt="" />
      <img className={styles.four} src="/sec5/4.png" alt="" />
      <img className={styles.five} src="/sec5/5.png" alt="" />
    </span>
  </section>;
}

function Sec6({ slide, pos, value }) {
  return <section className={styles[`sec${pos}`] + ' ' + ((slide >= pos) ? styles[`animSlide`] : '') + ' ' + ((slide > pos) ? styles[`dim`] : '')}>
    <GridCon />
    <span style={{ background: "#B81C1C" }} className={styles.glow}>

    </span>
    <span className={styles.glowText}>
      <p>You Got Rekt by</p>
      <h1>{value}</h1>
      <img className={styles.one} src="/sec6/1.png" alt="" />
      <img className={styles.two} src="/sec6/2.png" alt="" />
      <img className={styles.three} src="/sec6/3.png" alt="" />
      <img className={styles.four} src="/sec6/4.png" alt="" />
      <img className={styles.five} src="/sec6/5.png" alt="" />
      <img className={styles.six} src="/sec6/6.png" alt="" />
    </span>

  </section>;
}


function Sec7({ slide, pos, value }) {
  return <section className={styles[`sec${pos}`] + ' ' + ((slide >= pos) ? styles[`animSlide`] : '') + ' ' + ((slide > pos) ? styles[`dim`] : '')}>
    <GridCon />
    <span style={{ background: "#CA7615" }} className={styles.glow}>

    </span>
    <span className={styles.glowText}>
      <p>You Earned profit of</p>
      <h1>{value}</h1>
      <img className={styles.one} src="/sec7/1.png" alt="" />
      <img className={styles.two} src="/sec7/2.png" alt="" />
      <img className={styles.three} src="/sec7/3.png" alt="" />
      <img className={styles.four} src="/sec7/4.png" alt="" />
      <img className={styles.five} src="/sec7/5.png" alt="" />
      <img className={styles.six} src="/sec7/6.png" alt="" />
    </span>
  </section>;
}


const GridCon = () => {
  const [count, setcount] = useState({ x: 6, y: 6 })
  const [gap, setgap] = useState({ x: {}, y: {} })
  useEffect(() => {
    updateGrid();
    document.body.onresize = function () {
      updateGrid();
    }
  }, [])

  const updateGrid = () => {
    //console.log("update")
    let width = window.innerWidth;
    let height = document.body.scrollHeight;

    setcount((c) => {
      c.x = Math.ceil(height / (width / (count.y + 1)));
      return { ...c }
    })

    setgap((g) => {
      g.y = { columnGap: `${(width / (count.y + 1))}px` }
      g.x = { rowGap: `${(width / (count.y + 1))}px` }
      return { ...g }
    })
    //debugger
  }
  return (
    <div className={styles.grid}>
      <div className={styles.yGridCon}
        style={gap.y}
      >
        {
          [...Array(count.y + 1)].map((x, id) => {
            if (id == 0) {
              return <span style={{ background: "transparent" }} key={'x' + id} className={styles.yGrid} ></span>
            }
            return (
              <span key={'y' + id} className={styles.yGrid} ></span>
            )
          })
        }

      </div>
      <div className={styles.xGridCon}
        style={gap.x}
      >
        {
          [...Array(count.x + 1)].map((y, id) => {
            if (id == 0) {
              return <span style={{ background: "transparent" }} key={'y' + id} className={styles.xGrid} ></span>
            }
            return (
              <span key={'y' + id} className={styles.xGrid} ></span>
            )
          })
        }

      </div>
    </div>
  )
}


export function getServerSideProps(ctx) {

  let refer = ctx.query.refer
  let share = ctx.query.share

  return {
    props: {
      refer: refer || '',
      share: share || ''
    }
  }
}
